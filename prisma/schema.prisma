generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
  extensions   = [uuidOssp(map: "uuid-ossp")]
}

//abhikrantdhepe

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], name: "userId1")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "userId2")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  credits       Int       @default(10)
  accounts      Account[]
  sessions      Session[]
}

// Data Model for Reference:
//
//            Course
//         /    |     \
//        /     |      \
//     Unit1   Unit2   Unit3
//       |       |       |
//       |       |       |
//      Chp1    Chp1    Chp1       
//      Chp2    Chp2    Chp2
//      Chp3            Chp3
//                      Chp4

model Course {
  id    String @id @default(cuid())
  name  String
  units Unit[]

  image String
}

model Unit {
  id       String @id @default(cuid())
  courseId String

  course Course @relation(fields: [courseId], references: [id])
  name   String

  chapters Chapter[]

  @@index([courseId], name: "courseId")
}

model Chapter {
  id     String @id @default(cuid())
  unitId String
  name   String

  youtubeSearchQuery String //for the Youtube API
  videoId            String?

  summary String? @db.VarChar(3000)

  unit Unit @relation(fields: [unitId], references: [id])

  // each chapter will have a Question
  questions Question[]

  @@index([unitId], name: "unitId")
}

model Question {
  id        String  @id @default(cuid())
  chapterId String
  question  String  @db.VarChar(3000)
  answer    String  @db.VarChar(3000)
  options   String  @db.VarChar(3000)
  chapter   Chapter @relation(fields: [chapterId], references: [id])

  @@index([chapterId], name: "chapterId")
}
